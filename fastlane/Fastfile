ensure_bundle_exec
skip_docs

before_all do |lane, options|
  Dotenv.overload '.env.secret' unless lane === :bootstrap

  if ENV['CI']
    puts 'Running on CI'
    setup_ci
    xcversion(version: '~> ' + File.read('../.xcode-version').strip)
  else
    ensure_xcode_version(strict: false)
  end
end

###################
###### Setup ######
###################

desc 'Bootstrap'
lane :bootstrap do
  install_tools
  decrypt_repo and Dotenv.overload '.env.secret'
  download_certs
end

desc 'Install required dev tools'
lane :install_tools do
  Dir.chdir('..') do
    sh 'brew bundle --no-lock --no-upgrade || true'
  end
end

desc 'Sync Provisioning Profiles'
lane :download_certs do
  sync_code_signing(readonly: true, type: 'development')
  sync_code_signing(readonly: true, type: 'appstore')
end

###################
####### CI ########
###################

desc 'Continuous Integration (test + archive)'
lane :ci do
  test
  archive
end

desc 'Run All Tests'
lane :test do
  run_tests(
    scheme: 'All',
    device: 'iPhone 8',
    configuration: 'Debug',
  )
end

desc 'Archive'
lane :archive do
  build_app(
    scheme: 'All',
    configuration: 'Release',
    skip_package_ipa: true,
  )
end

###################
##### Staging #####
###################

desc 'Deploy student to Firebase & tutor to ASC'
lane :deploy_staging do
  bump_build
  deploy_to_firebase(scheme: 'Rythmico')
  deploy_to_testflight(scheme: 'RythmicoTutor')
  notify_slack
end

private_lane :deploy_to_firebase do |options|
  build_for_deploy(scheme: options[:scheme])
  firebase_app_distribution(
    googleservice_info_plist_path: 'GoogleService-Info.plist',
    release_notes: changelog_from_git_commits(
      commits_count: 20,
      pretty: '- %s (%h)', # - Commit message (abcd1234)
      match_lightweight_tag: false, # Match only tags, not branches
      merge_commit_filtering: 'exclude_merges', # Exclude merge commits
    ),
  )
end

###################
#### App Store ####
###################

desc 'Deploy to App Store Connect'
lane :deploy_live do
  bump_build
  deploy_to_testflight(scheme: 'Rythmico')
  deploy_to_testflight(scheme: 'Tutor')
  notify_slack
end

desc 'Bump Build Number'
lane :bump_build do
  bump_build_number(plist: 'Rythmico/Supporting Files/Info.plist')
  bump_build_number(plist: 'RythmicoTutor/Supporting Files/Info.plist')

  if ENV['GITHUB_ACTIONS']
    sh 'git config user.name "GitHub Actions"'
    sh 'git config user.email actions@github.com'
  end

  version_number = get_version_number(target: 'Rythmico')
  UI.user_error! 'Version number not found' unless version_number
  build_number = lane_context[:BUILD_NUMBER].to_s
  UI.user_error! 'Build number not found' unless build_number

  sh 'git add "../**/Info.plist"'
  sh "git commit" + " --author '#{last_git_commit_author}'" + " -m 'Bump build number (#{build_number}) [skip ci]'"
  add_git_tag(tag: version_number + '/' + build_number)
  push_to_git_remote(tags: true)
end

private_lane :deploy_to_testflight do |options|
  build_for_deploy(scheme: options[:scheme])
  upload_to_testflight(skip_submission: true, skip_waiting_for_build_processing: true)
end

private_lane :build_for_deploy do |options|
  build_app(configuration: 'Release', scheme: options[:scheme])
end

###################
###### dSYMs ######
###################

desc 'Sync dSYMs to Crashlytics'
lane :dsyms do
  sync_symbols(app_id: 'com.rythmico.student', gsp_path: 'Rythmico/Supporting Files/GoogleService-Info-Release.plist')
  sync_symbols(app_id: 'com.rythmico.tutor', gsp_path: 'RythmicoTutor/Supporting Files/GoogleService-Info-Release.plist')
  notify_slack
end

private_lane :sync_symbols do |options|
  download_dsyms(app_identifier: options[:app_id], version: 'latest', wait_for_dsym_processing: true)
  upload_symbols_to_crashlytics(gsp_path: options[:gsp_path], binary_path: 'fastlane/upload_crashlytics_symbols')
end

###################
###### Slack ######
###################

error do
  lane_context[:LANE_FAILED] = true
  notify_slack
end

private_lane :notify_slack do |lane, options|
  next unless ENV['CI']
  case lane
    when :deploy_live then notify_slack_deploy_live
    when :dsyms then notify_slack_dsyms
    else UI.important "Unknown source lane #{lane}" if lane_context[:LANE_FAILED]
  end
end

private_lane :notify_slack_deploy_live do
  version = lane_context[:VERSION_NUMBER]
  build = lane_context[:BUILD_NUMBER]
  send_slack_message(
    success: "*Successfully deployed version #{version} (#{build}) to TestFlight! üöÄ*",
    failure: "*Failed to deploy version #{version} (#{build}) to TestFlight!*",
    info: [:last_git_commit_hash],
  )
end

private_lane :notify_slack_dsyms do
  send_slack_message(
    success: "*Successfully uploaded latest dSYMs to Firebase! üêõ*",
    failure: "*Failed to upload dSYMs to Firebase!*",
    info: [:last_git_commit],
  )
end

private_lane :send_slack_message do |options|
  webhook = ENV['SLACK_WEBHOOK']
  is_lane_failed = lane_context[:LANE_FAILED]
  message = is_lane_failed ? options[:failure] : options[:success]
  info = options[:info]
  slack(
    slack_url: webhook,
    success: !is_lane_failed,
    message: message,
    default_payloads: info || [],
    fail_on_error: !is_lane_failed,
  )
end
